{% extends 'base.html.twig' %}

{% block title %}Symfony ToDo{% endblock %}

{% block body %}
    <h1>A simple ToDo app</h1>
    <div>
        <h2>What you need ToDo:</h2>
        <ul id="read-todo">
            <!-- List of todos will be rendered here -->
        </ul>
    </div>
    <div>
        <button id="toggle-form">Add ToDo</button>
        <button id="toggle-edit">Edit ToDos</button>
    </div>
    <div>
        <form id="create-todo" style="display: none;">
            <label for="title">Title:</label>
            <input type="text" id="title" name="title" required>
            <label for="description">Description:</label>
            <input type="text" id="description" name="description" required>
            <button type="submit">Submit</button>
        </form>
    </div>

    <script>
        // Toggle the visibility of the edit buttons
        let editMode = false;
        const editButton = document.getElementById('toggle-edit');
        editButton.addEventListener('click', function () {
            document.querySelectorAll('.action-button').forEach(button => {
                button.style.display = editMode ? 'none' : 'block';
            });
            editMode = !editMode;
            if (editMode) {
                editButton.innerText = 'Close Edit';
            } else {
                editButton.innerText = 'Edit ToDos';
            }
        });
        // Toggle the visibility of the form
        const button = document.getElementById('toggle-form');
        button.addEventListener('click', function () {
            const form = document.getElementById('create-todo');
            form.style.display = form.style.display === 'none' ? 'block' : 'none';
        });
        // Fetch the list of todos from the API
        fetch('/api/todos')
            .then(response => response.json())
            .then(todos => {

                // Add each todo to the list
                todos.forEach(todo => {
                    renderTodo(todo);
                });
                
            })
            // Catch any errors and log them to the console
            .catch(error => {
                console.error('Error:', error);
            });

        // Get the form element
        const form = document.getElementById('create-todo');

        // Add an event listener to the form to create a new todo and prevent the default form submission
        form.addEventListener('submit', function (event) {
            event.preventDefault();

            // Get the title and description values from the form and validate them
            const title = document.getElementById('title').value;
            if (!title.trim()) {
                alert('Title cannot be empty or whitespace only');
                return;
            }
            const description = document.getElementById('description').value;
            if (!description.trim()) {
                alert('Description cannot be empty or whitespace only');
                return;
            }

            // Send a POST request to the API with the new todo data
            fetch('/api/todos', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    title: title,
                    description: description,
                }),
            })
                .then(response => response.json())
                .then(todo => {
                    
                    // Add the new todo to the list and reset the form
                    renderTodo(todo);
                    document.getElementById('title').value = '';
                    document.getElementById('description').value = '';

                    // Notify the user that there are new todos
                    alert('You have new things to do!');
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        });

        // Function to render a todo item in the list
        function renderTodo(todo) {
            const list = document.getElementById('read-todo');
            const item = document.createElement('li');
            const checkbox = document.createElement('input');
            const deleteButton = document.createElement('button');
            const editTodoButton = document.createElement('button');
            editTodoButton.classList.add('action-button', 'edit-button');

            let isEditing = false;
            let titleInput;
            let descriptionInput;

            editTodoButton.addEventListener('click', function () {
                if (!isEditing) {
                    // Switch to edit mode
                    titleInput = document.createElement('input');
                    titleInput.type = 'text';
                    titleInput.value = todo.title ?? '';

                    descriptionInput = document.createElement('input');
                    descriptionInput.type = 'text';
                    descriptionInput.value = todo.description ?? '';

                    item.replaceChild(titleInput, todoText);
                    item.insertBefore(descriptionInput, editTodoButton);
                    editTodoButton.innerText = 'Save';
                    isEditing = true;
                } else {
                    // Save changes
                    const updatedTitle = titleInput.value;
                    const updatedDescription = descriptionInput.value;

                    if (!updatedTitle.trim()) {
                        alert('Title cannot be empty or whitespace only');
                        return;
                    }
                    if (!updatedDescription.trim()) {
                        alert('Description cannot be empty or whitespace only');
                        return;
                    }

                    fetch(`/api/todos/${todo.id}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            title: updatedTitle,
                            description: updatedDescription,
                            completed: checkbox.checked,
                        }),
                    })
                    .then(response => response.json())
                    .then(updatedTodo => {
                        todoText.innerText = `${updatedTodo.title} - ${updatedTodo.description}`;
                        item.replaceChild(todoText, titleInput);
                        item.removeChild(descriptionInput);
                        editTodoButton.innerText = 'Edit';
                        isEditing = false;
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
                }
            });
            editTodoButton.style.display = 'none';
            editTodoButton.innerText = 'Edit';
            deleteButton.classList.add('action-button', 'delete-button');
            deleteButton.style.display = 'none';
            deleteButton.innerText = 'Delete';
            deleteButton.addEventListener('click', function () {
                // Confirm the user wants to delete the todo
                const confirmDelete = confirm('Are you sure you want to delete this todo?');
                if (!confirmDelete) {
                    return;
                }
                // Send a DELETE request to the API to delete the todo
                fetch(`/api/todos/${todo.id}`, {
                    method: 'DELETE',
                })
                    .then(response => {
                        if (response.ok) {
                            list.removeChild(item);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
            });
            checkbox.type = 'checkbox';
            checkbox.checked = todo.completed;

            checkbox.addEventListener('change', function (event) {
                // Send a PATCH request to the API to update the todo status
                fetch(`/api/todos/${todo.id}`, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        completed: event.target.checked,
                    }),
                })
                    .then(response => response.json())
                    .catch(error => {
                        console.error('Error:', error);
                    });
            });

            // Append the checkbox, todo title and description to the list item
            item.append(checkbox);
            const todoText = document.createElement('span');
            todoText.innerText = `${todo.title} - ${todo.description}`;
            item.append(todoText);
            item.append(editTodoButton);
            item.append(deleteButton);
            list.append(item);
        }
    </script>
{% endblock %}
